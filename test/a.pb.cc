// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: a.proto
// Protobuf C++ Version: 5.27.1

#include "a.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace mytest {

inline constexpr CCC::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : value_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR CCC::CCC(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CCCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CCCDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CCCDefaultTypeInternal() {}
  union {
    CCC _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CCCDefaultTypeInternal _CCC_default_instance_;

inline constexpr BBB::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : value_{},
        ints_{},
        _ints_cached_byte_size_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR BBB::BBB(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct BBBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BBBDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BBBDefaultTypeInternal() {}
  union {
    BBB _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BBBDefaultTypeInternal _BBB_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR AAA_KvsEntry_DoNotUse::AAA_KvsEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct AAA_KvsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AAA_KvsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AAA_KvsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AAA_KvsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AAA_KvsEntry_DoNotUseDefaultTypeInternal _AAA_KvsEntry_DoNotUse_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR AAA_Kvs2Entry_DoNotUse::AAA_Kvs2Entry_DoNotUse(::_pbi::ConstantInitialized) {}
struct AAA_Kvs2Entry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AAA_Kvs2Entry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AAA_Kvs2Entry_DoNotUseDefaultTypeInternal() {}
  union {
    AAA_Kvs2Entry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AAA_Kvs2Entry_DoNotUseDefaultTypeInternal _AAA_Kvs2Entry_DoNotUse_default_instance_;

inline constexpr AAA::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        names_{},
        kvs_{},
        kvs2_{},
        ints_{},
        _ints_cached_byte_size_{0},
        uint64s_{},
        _uint64s_cached_byte_size_{0},
        floats_{},
        errors_{},
        _errors_cached_byte_size_{0},
        doubles_{},
        bbbs_{},
        uint32s_{},
        _uint32s_cached_byte_size_{0},
        int64s_{},
        _int64s_cached_byte_size_{0},
        date_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        xx_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        bbb_{nullptr},
        e_{static_cast< ::mytest::Error >(0)},
        value_{0},
        d_{0},
        aaa_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AAA::AAA(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AAADefaultTypeInternal {
  PROTOBUF_CONSTEXPR AAADefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AAADefaultTypeInternal() {}
  union {
    AAA _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AAADefaultTypeInternal _AAA_default_instance_;
}  // namespace mytest
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_a_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_a_2eproto = nullptr;
const ::uint32_t
    TableStruct_a_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mytest::BBB, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mytest::BBB, _impl_.value_),
        PROTOBUF_FIELD_OFFSET(::mytest::BBB, _impl_.ints_),
        PROTOBUF_FIELD_OFFSET(::mytest::AAA_KvsEntry_DoNotUse, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::mytest::AAA_KvsEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mytest::AAA_KvsEntry_DoNotUse, key_),
        PROTOBUF_FIELD_OFFSET(::mytest::AAA_KvsEntry_DoNotUse, value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::mytest::AAA_Kvs2Entry_DoNotUse, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::mytest::AAA_Kvs2Entry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mytest::AAA_Kvs2Entry_DoNotUse, key_),
        PROTOBUF_FIELD_OFFSET(::mytest::AAA_Kvs2Entry_DoNotUse, value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::mytest::AAA, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mytest::AAA, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mytest::AAA, _impl_.value_),
        PROTOBUF_FIELD_OFFSET(::mytest::AAA, _impl_.names_),
        PROTOBUF_FIELD_OFFSET(::mytest::AAA, _impl_.xx_),
        PROTOBUF_FIELD_OFFSET(::mytest::AAA, _impl_.kvs_),
        PROTOBUF_FIELD_OFFSET(::mytest::AAA, _impl_.kvs2_),
        PROTOBUF_FIELD_OFFSET(::mytest::AAA, _impl_.e_),
        PROTOBUF_FIELD_OFFSET(::mytest::AAA, _impl_.date_),
        PROTOBUF_FIELD_OFFSET(::mytest::AAA, _impl_.bbb_),
        PROTOBUF_FIELD_OFFSET(::mytest::AAA, _impl_.aaa_),
        PROTOBUF_FIELD_OFFSET(::mytest::AAA, _impl_.d_),
        PROTOBUF_FIELD_OFFSET(::mytest::AAA, _impl_.bbbs_),
        PROTOBUF_FIELD_OFFSET(::mytest::AAA, _impl_.ints_),
        PROTOBUF_FIELD_OFFSET(::mytest::AAA, _impl_.uint32s_),
        PROTOBUF_FIELD_OFFSET(::mytest::AAA, _impl_.floats_),
        PROTOBUF_FIELD_OFFSET(::mytest::AAA, _impl_.doubles_),
        PROTOBUF_FIELD_OFFSET(::mytest::AAA, _impl_.int64s_),
        PROTOBUF_FIELD_OFFSET(::mytest::AAA, _impl_.uint64s_),
        PROTOBUF_FIELD_OFFSET(::mytest::AAA, _impl_.errors_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mytest::CCC, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::mytest::CCC, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::mytest::CCC, _impl_.value_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::mytest::BBB)},
        {10, 20, -1, sizeof(::mytest::AAA_KvsEntry_DoNotUse)},
        {22, 32, -1, sizeof(::mytest::AAA_Kvs2Entry_DoNotUse)},
        {34, 60, -1, sizeof(::mytest::AAA)},
        {78, -1, -1, sizeof(::mytest::CCC)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::mytest::_BBB_default_instance_._instance,
    &::mytest::_AAA_KvsEntry_DoNotUse_default_instance_._instance,
    &::mytest::_AAA_Kvs2Entry_DoNotUse_default_instance_._instance,
    &::mytest::_AAA_default_instance_._instance,
    &::mytest::_CCC_default_instance_._instance,
};
const char descriptor_table_protodef_a_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\007a.proto\022\006mytest\"\"\n\003BBB\022\r\n\005value\030\001 \003(\t\022"
    "\014\n\004ints\030\003 \003(\005\"\340\003\n\003AAA\022\r\n\005value\030\013 \001(\005\022\r\n\005"
    "names\030\002 \003(\t\022\n\n\002xx\030\027 \001(\t\022!\n\003kvs\030\003 \003(\0132\024.m"
    "ytest.AAA.KvsEntry\022#\n\004kvs2\030\004 \003(\0132\025.mytes"
    "t.AAA.Kvs2Entry\022\030\n\001e\030\005 \001(\0162\r.mytest.Erro"
    "r\022\014\n\004date\030\006 \001(\014\022\030\n\003bbb\030\020 \001(\0132\013.mytest.BB"
    "B\022\013\n\003aaa\030! \001(\002\022\t\n\001d\030c \001(\001\022\033\n\004bbbs\030\363\301\007 \003("
    "\0132\013.mytest.BBB\022\r\n\004ints\030\313\002 \003(\005\022\022\n\007uint32s"
    "\030\370\275\357\005 \003(\r\022\017\n\006floats\030\227` \003(\002\022\021\n\007doubles\030\247\256"
    "\001 \003(\001\022\021\n\006int64s\030\254\276\357\005 \003(\003\022\020\n\007uint64s\030\253M \003"
    "(\004\022\036\n\006errors\030\230` \003(\0162\r.mytest.Error\032*\n\010Kv"
    "sEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:\0028\001\0328"
    "\n\tKvs2Entry\022\013\n\003key\030\001 \001(\005\022\032\n\005value\030\002 \001(\0132"
    "\013.mytest.BBB:\0028\001\"/\n\003CCC\022\020\n\006number\030\001 \001(\005H"
    "\000\022\r\n\003str\030\002 \001(\tH\000B\007\n\005value*(\n\005Error\022\006\n\002E1"
    "\020\000\022\006\n\002E2\020\002\022\017\n\002E3\020\377\377\377\377\377\377\377\377\377\001b\006proto3"
};
static ::absl::once_flag descriptor_table_a_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_a_2eproto = {
    false,
    false,
    635,
    descriptor_table_protodef_a_2eproto,
    "a.proto",
    &descriptor_table_a_2eproto_once,
    nullptr,
    0,
    5,
    schemas,
    file_default_instances,
    TableStruct_a_2eproto::offsets,
    file_level_enum_descriptors_a_2eproto,
    file_level_service_descriptors_a_2eproto,
};
namespace mytest {
const ::google::protobuf::EnumDescriptor* Error_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_a_2eproto);
  return file_level_enum_descriptors_a_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t Error_internal_data_[] = {
    196607u, 32u, 2u, };
bool Error_IsValid(int value) {
  return ::_pbi::ValidateEnum(value, Error_internal_data_);
}
// ===================================================================

class BBB::_Internal {
 public:
};

BBB::BBB(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mytest.BBB)
}
inline PROTOBUF_NDEBUG_INLINE BBB::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mytest::BBB& from_msg)
      : value_{visibility, arena, from.value_},
        ints_{visibility, arena, from.ints_},
        _ints_cached_byte_size_{0},
        _cached_size_{0} {}

BBB::BBB(
    ::google::protobuf::Arena* arena,
    const BBB& from)
    : ::google::protobuf::Message(arena) {
  BBB* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:mytest.BBB)
}
inline PROTOBUF_NDEBUG_INLINE BBB::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : value_{visibility, arena},
        ints_{visibility, arena},
        _ints_cached_byte_size_{0},
        _cached_size_{0} {}

inline void BBB::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
BBB::~BBB() {
  // @@protoc_insertion_point(destructor:mytest.BBB)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BBB::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
BBB::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(BBB, _impl_._cached_size_),
              false,
          },
          &BBB::MergeImpl,
          &BBB::kDescriptorMethods,
          &descriptor_table_a_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 2, 0, 24, 2> BBB::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967290,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_BBB_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mytest::BBB>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated string value = 1;
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(BBB, _impl_.value_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated int32 ints = 3;
    {::_pbi::TcParser::FastV32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(BBB, _impl_.ints_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string value = 1;
    {PROTOBUF_FIELD_OFFSET(BBB, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated int32 ints = 3;
    {PROTOBUF_FIELD_OFFSET(BBB, _impl_.ints_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
  }},
  // no aux_entries
  {{
    "\12\5\0\0\0\0\0\0"
    "mytest.BBB"
    "value"
  }},
};

PROTOBUF_NOINLINE void BBB::Clear() {
// @@protoc_insertion_point(message_clear_start:mytest.BBB)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _impl_.ints_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* BBB::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mytest.BBB)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string value = 1;
  for (int i = 0, n = this->_internal_value_size(); i < n; ++i) {
    const auto& s = this->_internal_value().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mytest.BBB.value");
    target = stream->WriteString(1, s, target);
  }

  // repeated int32 ints = 3;
  {
    int byte_size = _impl_._ints_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_ints(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mytest.BBB)
  return target;
}

::size_t BBB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mytest.BBB)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated string value = 1;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_value().size());
  for (int i = 0, n = _internal_value().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_value().Get(i));
  }
  // repeated int32 ints = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_ints())
    ;
    _impl_._ints_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void BBB::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BBB*>(&to_msg);
  auto& from = static_cast<const BBB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mytest.BBB)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_value()->MergeFrom(from._internal_value());
  _this->_internal_mutable_ints()->MergeFrom(from._internal_ints());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BBB::CopyFrom(const BBB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mytest.BBB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BBB::InternalSwap(BBB* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
  _impl_.ints_.InternalSwap(&other->_impl_.ints_);
}

::google::protobuf::Metadata BBB::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

AAA_KvsEntry_DoNotUse::AAA_KvsEntry_DoNotUse() {}
AAA_KvsEntry_DoNotUse::AAA_KvsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
const ::google::protobuf::MessageLite::ClassData*
AAA_KvsEntry_DoNotUse::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // tc_table
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(AAA_KvsEntry_DoNotUse, _cached_size_),
              false,
          },
          &AAA_KvsEntry_DoNotUse::MergeImpl,
          &AAA_KvsEntry_DoNotUse::kDescriptorMethods,
          &descriptor_table_a_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
// ===================================================================

AAA_Kvs2Entry_DoNotUse::AAA_Kvs2Entry_DoNotUse() {}
AAA_Kvs2Entry_DoNotUse::AAA_Kvs2Entry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
const ::google::protobuf::MessageLite::ClassData*
AAA_Kvs2Entry_DoNotUse::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // tc_table
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(AAA_Kvs2Entry_DoNotUse, _cached_size_),
              false,
          },
          &AAA_Kvs2Entry_DoNotUse::MergeImpl,
          &AAA_Kvs2Entry_DoNotUse::kDescriptorMethods,
          &descriptor_table_a_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
// ===================================================================

class AAA::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AAA>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AAA, _impl_._has_bits_);
};

AAA::AAA(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mytest.AAA)
}
inline PROTOBUF_NDEBUG_INLINE AAA::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mytest::AAA& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        names_{visibility, arena, from.names_},
        kvs_{visibility, arena, from.kvs_},
        kvs2_{visibility, arena, from.kvs2_},
        ints_{visibility, arena, from.ints_},
        _ints_cached_byte_size_{0},
        uint64s_{visibility, arena, from.uint64s_},
        _uint64s_cached_byte_size_{0},
        floats_{visibility, arena, from.floats_},
        errors_{visibility, arena, from.errors_},
        _errors_cached_byte_size_{0},
        doubles_{visibility, arena, from.doubles_},
        bbbs_{visibility, arena, from.bbbs_},
        uint32s_{visibility, arena, from.uint32s_},
        _uint32s_cached_byte_size_{0},
        int64s_{visibility, arena, from.int64s_},
        _int64s_cached_byte_size_{0},
        date_(arena, from.date_),
        xx_(arena, from.xx_) {}

AAA::AAA(
    ::google::protobuf::Arena* arena,
    const AAA& from)
    : ::google::protobuf::Message(arena) {
  AAA* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.bbb_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mytest::BBB>(
                              arena, *from._impl_.bbb_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, e_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, e_),
           offsetof(Impl_, aaa_) -
               offsetof(Impl_, e_) +
               sizeof(Impl_::aaa_));

  // @@protoc_insertion_point(copy_constructor:mytest.AAA)
}
inline PROTOBUF_NDEBUG_INLINE AAA::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        names_{visibility, arena},
        kvs_{visibility, arena},
        kvs2_{visibility, arena},
        ints_{visibility, arena},
        _ints_cached_byte_size_{0},
        uint64s_{visibility, arena},
        _uint64s_cached_byte_size_{0},
        floats_{visibility, arena},
        errors_{visibility, arena},
        _errors_cached_byte_size_{0},
        doubles_{visibility, arena},
        bbbs_{visibility, arena},
        uint32s_{visibility, arena},
        _uint32s_cached_byte_size_{0},
        int64s_{visibility, arena},
        _int64s_cached_byte_size_{0},
        date_(arena),
        xx_(arena) {}

inline void AAA::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, bbb_),
           0,
           offsetof(Impl_, aaa_) -
               offsetof(Impl_, bbb_) +
               sizeof(Impl_::aaa_));
}
AAA::~AAA() {
  // @@protoc_insertion_point(destructor:mytest.AAA)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AAA::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.date_.Destroy();
  _impl_.xx_.Destroy();
  delete _impl_.bbb_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
AAA::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(AAA, _impl_._cached_size_),
              false,
          },
          &AAA::MergeImpl,
          &AAA::kDescriptorMethods,
          &descriptor_table_a_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 18, 5, 42, 51> AAA::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AAA, _impl_._has_bits_),
    0, // no _extensions_
    12312364, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4290739137,  // skipmap
    offsetof(decltype(_table_), field_entries),
    18,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AAA_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mytest::AAA>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated string names = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AAA, _impl_.names_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .mytest.Error e = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AAA, _impl_.e_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(AAA, _impl_.e_)}},
    // bytes date = 6;
    {::_pbi::TcParser::FastBS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(AAA, _impl_.date_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // int32 value = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AAA, _impl_.value_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(AAA, _impl_.value_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .mytest.BBB bbb = 16;
    {::_pbi::TcParser::FastMtS2,
     {386, 0, 0, PROTOBUF_FIELD_OFFSET(AAA, _impl_.bbb_)}},
    // float aaa = 33;
    {::_pbi::TcParser::FastF32S2,
     {653, 63, 0, PROTOBUF_FIELD_OFFSET(AAA, _impl_.aaa_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // double d = 99;
    {::_pbi::TcParser::FastF64S2,
     {1689, 63, 0, PROTOBUF_FIELD_OFFSET(AAA, _impl_.d_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // string xx = 23;
    {::_pbi::TcParser::FastUS2,
     {442, 63, 0, PROTOBUF_FIELD_OFFSET(AAA, _impl_.xx_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated int32 ints = 331;
    {::_pbi::TcParser::FastV32P2,
     {5338, 63, 0, PROTOBUF_FIELD_OFFSET(AAA, _impl_.ints_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    33, 0, 5,
    65534, 8, 65535, 9, 65535, 9, 65535, 9, 65531, 9,331, 0, 1,
     65534, 10,
    9899, 0, 1,
    65534, 11,12311, 0, 1,
     65532, 12,22311, 0, 1,
     65534, 14,57587, 1, 1,
     65534, 15,57080, 187, 4,
     65534, 16, 65535, 17,
    65535, 17, 65519, 17,
    65535, 65535
  }}, {{
    // repeated string names = 2;
    {PROTOBUF_FIELD_OFFSET(AAA, _impl_.names_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // map<int32, int32> kvs = 3;
    {PROTOBUF_FIELD_OFFSET(AAA, _impl_.kvs_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<int32, .mytest.BBB> kvs2 = 4;
    {PROTOBUF_FIELD_OFFSET(AAA, _impl_.kvs2_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // .mytest.Error e = 5;
    {PROTOBUF_FIELD_OFFSET(AAA, _impl_.e_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bytes date = 6;
    {PROTOBUF_FIELD_OFFSET(AAA, _impl_.date_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // int32 value = 11;
    {PROTOBUF_FIELD_OFFSET(AAA, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .mytest.BBB bbb = 16;
    {PROTOBUF_FIELD_OFFSET(AAA, _impl_.bbb_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string xx = 23;
    {PROTOBUF_FIELD_OFFSET(AAA, _impl_.xx_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float aaa = 33;
    {PROTOBUF_FIELD_OFFSET(AAA, _impl_.aaa_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // double d = 99;
    {PROTOBUF_FIELD_OFFSET(AAA, _impl_.d_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // repeated int32 ints = 331;
    {PROTOBUF_FIELD_OFFSET(AAA, _impl_.ints_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated uint64 uint64s = 9899;
    {PROTOBUF_FIELD_OFFSET(AAA, _impl_.uint64s_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt64)},
    // repeated float floats = 12311;
    {PROTOBUF_FIELD_OFFSET(AAA, _impl_.floats_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated .mytest.Error errors = 12312;
    {PROTOBUF_FIELD_OFFSET(AAA, _impl_.errors_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedOpenEnum)},
    // repeated double doubles = 22311;
    {PROTOBUF_FIELD_OFFSET(AAA, _impl_.doubles_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
    // repeated .mytest.BBB bbbs = 123123;
    {PROTOBUF_FIELD_OFFSET(AAA, _impl_.bbbs_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated uint32 uint32s = 12312312;
    {PROTOBUF_FIELD_OFFSET(AAA, _impl_.uint32s_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // repeated int64 int64s = 12312364;
    {PROTOBUF_FIELD_OFFSET(AAA, _impl_.int64s_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mytest::BBB>()},
    {::_pbi::TcParser::GetTable<::mytest::BBB>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(AAA()._impl_.kvs_)>(
        0, 0, 0, 5,
        5)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(AAA()._impl_.kvs2_)>(
        0, 0, 0, 5,
        11)},
    {::_pbi::TcParser::CreateInArenaStorageCb<::mytest::BBB>},
  }}, {{
    "\12\5\0\0\0\0\0\0\2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "mytest.AAA"
    "names"
    "xx"
  }},
};

PROTOBUF_NOINLINE void AAA::Clear() {
// @@protoc_insertion_point(message_clear_start:mytest.AAA)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.names_.Clear();
  _impl_.kvs_.Clear();
  _impl_.kvs2_.Clear();
  _impl_.ints_.Clear();
  _impl_.uint64s_.Clear();
  _impl_.floats_.Clear();
  _impl_.errors_.Clear();
  _impl_.doubles_.Clear();
  _impl_.bbbs_.Clear();
  _impl_.uint32s_.Clear();
  _impl_.int64s_.Clear();
  _impl_.date_.ClearToEmpty();
  _impl_.xx_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.bbb_ != nullptr);
    _impl_.bbb_->Clear();
  }
  ::memset(&_impl_.e_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.aaa_) -
      reinterpret_cast<char*>(&_impl_.e_)) + sizeof(_impl_.aaa_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* AAA::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mytest.AAA)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string names = 2;
  for (int i = 0, n = this->_internal_names_size(); i < n; ++i) {
    const auto& s = this->_internal_names().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mytest.AAA.names");
    target = stream->WriteString(2, s, target);
  }

  // map<int32, int32> kvs = 3;
  if (!_internal_kvs().empty()) {
    using MapType = ::google::protobuf::Map<::int32_t, ::int32_t>;
    using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_INT32>;
    const auto& field = _internal_kvs();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            3, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int32, .mytest.BBB> kvs2 = 4;
  if (!_internal_kvs2().empty()) {
    using MapType = ::google::protobuf::Map<::int32_t, ::mytest::BBB>;
    using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::mytest::BBB,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_MESSAGE>;
    const auto& field = _internal_kvs2();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            4, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            4, entry.first, entry.second, target, stream);
      }
    }
  }

  // .mytest.Error e = 5;
  if (this->_internal_e() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_e(), target);
  }

  // bytes date = 6;
  if (!this->_internal_date().empty()) {
    const std::string& _s = this->_internal_date();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  // int32 value = 11;
  if (this->_internal_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<11>(
            stream, this->_internal_value(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .mytest.BBB bbb = 16;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        16, *_impl_.bbb_, _impl_.bbb_->GetCachedSize(), target, stream);
  }

  // string xx = 23;
  if (!this->_internal_xx().empty()) {
    const std::string& _s = this->_internal_xx();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mytest.AAA.xx");
    target = stream->WriteStringMaybeAliased(23, _s, target);
  }

  // float aaa = 33;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_aaa = this->_internal_aaa();
  ::uint32_t raw_aaa;
  memcpy(&raw_aaa, &tmp_aaa, sizeof(tmp_aaa));
  if (raw_aaa != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        33, this->_internal_aaa(), target);
  }

  // double d = 99;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_d = this->_internal_d();
  ::uint64_t raw_d;
  memcpy(&raw_d, &tmp_d, sizeof(tmp_d));
  if (raw_d != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        99, this->_internal_d(), target);
  }

  // repeated int32 ints = 331;
  {
    int byte_size = _impl_._ints_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          331, _internal_ints(), byte_size, target);
    }
  }

  // repeated uint64 uint64s = 9899;
  {
    int byte_size = _impl_._uint64s_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          9899, _internal_uint64s(), byte_size, target);
    }
  }

  // repeated float floats = 12311;
  if (this->_internal_floats_size() > 0) {
    target = stream->WriteFixedPacked(12311, _internal_floats(), target);
  }

  // repeated .mytest.Error errors = 12312;
  {
    std::size_t byte_size = _impl_._errors_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(12312, _internal_errors(),
                                       byte_size, target);
    }
  }

  // repeated double doubles = 22311;
  if (this->_internal_doubles_size() > 0) {
    target = stream->WriteFixedPacked(22311, _internal_doubles(), target);
  }

  // repeated .mytest.BBB bbbs = 123123;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_bbbs_size());
       i < n; i++) {
    const auto& repfield = this->_internal_bbbs().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            123123, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated uint32 uint32s = 12312312;
  {
    int byte_size = _impl_._uint32s_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          12312312, _internal_uint32s(), byte_size, target);
    }
  }

  // repeated int64 int64s = 12312364;
  {
    int byte_size = _impl_._int64s_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          12312364, _internal_int64s(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mytest.AAA)
  return target;
}

::size_t AAA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mytest.AAA)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated string names = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_names().size());
  for (int i = 0, n = _internal_names().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_names().Get(i));
  }
  // map<int32, int32> kvs = 3;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_kvs_size());
  for (const auto& entry : _internal_kvs()) {
    total_size += _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_INT32>::ByteSizeLong(entry.first, entry.second);
  }
  // map<int32, .mytest.BBB> kvs2 = 4;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_kvs2_size());
  for (const auto& entry : _internal_kvs2()) {
    total_size += _pbi::MapEntryFuncs<::int32_t, ::mytest::BBB,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_MESSAGE>::ByteSizeLong(entry.first, entry.second);
  }
  // repeated int32 ints = 331;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_ints())
    ;
    _impl_._ints_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 2 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated uint64 uint64s = 9899;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_uint64s())
    ;
    _impl_._uint64s_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 3 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float floats = 12311;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_floats_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 3 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated .mytest.Error errors = 12312;
  {
    std::size_t data_size = 0;
    auto count = static_cast<std::size_t>(this->_internal_errors_size());

    for (std::size_t i = 0; i < count; ++i) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
          this->_internal_errors().Get(static_cast<int>(i)));
    }
    total_size += data_size;
    if (data_size > 0) {
      total_size += 3;
      total_size += ::_pbi::WireFormatLite::Int32Size(
          static_cast<int32_t>(data_size));
    }
    _impl_._errors_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
  }
  // repeated double doubles = 22311;
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_doubles_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 3 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated .mytest.BBB bbbs = 123123;
  total_size += 3UL * this->_internal_bbbs_size();
  for (const auto& msg : this->_internal_bbbs()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated uint32 uint32s = 12312312;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_uint32s())
    ;
    _impl_._uint32s_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 4 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int64 int64s = 12312364;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_int64s())
    ;
    _impl_._int64s_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 4 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // bytes date = 6;
  if (!this->_internal_date().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_date());
  }

  // string xx = 23;
  if (!this->_internal_xx().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_xx());
  }

  // .mytest.BBB bbb = 16;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.bbb_);
  }

  // .mytest.Error e = 5;
  if (this->_internal_e() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_e());
  }

  // int32 value = 11;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_value());
  }

  // double d = 99;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_d = this->_internal_d();
  ::uint64_t raw_d;
  memcpy(&raw_d, &tmp_d, sizeof(tmp_d));
  if (raw_d != 0) {
    total_size += 10;
  }

  // float aaa = 33;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_aaa = this->_internal_aaa();
  ::uint32_t raw_aaa;
  memcpy(&raw_aaa, &tmp_aaa, sizeof(tmp_aaa));
  if (raw_aaa != 0) {
    total_size += 6;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AAA::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AAA*>(&to_msg);
  auto& from = static_cast<const AAA&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mytest.AAA)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_names()->MergeFrom(from._internal_names());
  _this->_impl_.kvs_.MergeFrom(from._impl_.kvs_);
  _this->_impl_.kvs2_.MergeFrom(from._impl_.kvs2_);
  _this->_internal_mutable_ints()->MergeFrom(from._internal_ints());
  _this->_internal_mutable_uint64s()->MergeFrom(from._internal_uint64s());
  _this->_internal_mutable_floats()->MergeFrom(from._internal_floats());
  _this->_internal_mutable_errors()->MergeFrom(from._internal_errors());
  _this->_internal_mutable_doubles()->MergeFrom(from._internal_doubles());
  _this->_internal_mutable_bbbs()->MergeFrom(
      from._internal_bbbs());
  _this->_internal_mutable_uint32s()->MergeFrom(from._internal_uint32s());
  _this->_internal_mutable_int64s()->MergeFrom(from._internal_int64s());
  if (!from._internal_date().empty()) {
    _this->_internal_set_date(from._internal_date());
  }
  if (!from._internal_xx().empty()) {
    _this->_internal_set_xx(from._internal_xx());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.bbb_ != nullptr);
    if (_this->_impl_.bbb_ == nullptr) {
      _this->_impl_.bbb_ =
          ::google::protobuf::Message::CopyConstruct<::mytest::BBB>(arena, *from._impl_.bbb_);
    } else {
      _this->_impl_.bbb_->MergeFrom(*from._impl_.bbb_);
    }
  }
  if (from._internal_e() != 0) {
    _this->_impl_.e_ = from._impl_.e_;
  }
  if (from._internal_value() != 0) {
    _this->_impl_.value_ = from._impl_.value_;
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_d = from._internal_d();
  ::uint64_t raw_d;
  memcpy(&raw_d, &tmp_d, sizeof(tmp_d));
  if (raw_d != 0) {
    _this->_impl_.d_ = from._impl_.d_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_aaa = from._internal_aaa();
  ::uint32_t raw_aaa;
  memcpy(&raw_aaa, &tmp_aaa, sizeof(tmp_aaa));
  if (raw_aaa != 0) {
    _this->_impl_.aaa_ = from._impl_.aaa_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AAA::CopyFrom(const AAA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mytest.AAA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AAA::InternalSwap(AAA* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.names_.InternalSwap(&other->_impl_.names_);
  _impl_.kvs_.InternalSwap(&other->_impl_.kvs_);
  _impl_.kvs2_.InternalSwap(&other->_impl_.kvs2_);
  _impl_.ints_.InternalSwap(&other->_impl_.ints_);
  _impl_.uint64s_.InternalSwap(&other->_impl_.uint64s_);
  _impl_.floats_.InternalSwap(&other->_impl_.floats_);
  _impl_.errors_.InternalSwap(&other->_impl_.errors_);
  _impl_.doubles_.InternalSwap(&other->_impl_.doubles_);
  _impl_.bbbs_.InternalSwap(&other->_impl_.bbbs_);
  _impl_.uint32s_.InternalSwap(&other->_impl_.uint32s_);
  _impl_.int64s_.InternalSwap(&other->_impl_.int64s_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.date_, &other->_impl_.date_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.xx_, &other->_impl_.xx_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AAA, _impl_.aaa_)
      + sizeof(AAA::_impl_.aaa_)
      - PROTOBUF_FIELD_OFFSET(AAA, _impl_.bbb_)>(
          reinterpret_cast<char*>(&_impl_.bbb_),
          reinterpret_cast<char*>(&other->_impl_.bbb_));
}

::google::protobuf::Metadata AAA::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CCC::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::mytest::CCC, _impl_._oneof_case_);
};

CCC::CCC(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mytest.CCC)
}
inline PROTOBUF_NDEBUG_INLINE CCC::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mytest::CCC& from_msg)
      : value_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

CCC::CCC(
    ::google::protobuf::Arena* arena,
    const CCC& from)
    : ::google::protobuf::Message(arena) {
  CCC* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (value_case()) {
    case VALUE_NOT_SET:
      break;
      case kNumber:
        _impl_.value_.number_ = from._impl_.value_.number_;
        break;
      case kStr:
        new (&_impl_.value_.str_) decltype(_impl_.value_.str_){arena, from._impl_.value_.str_};
        break;
  }

  // @@protoc_insertion_point(copy_constructor:mytest.CCC)
}
inline PROTOBUF_NDEBUG_INLINE CCC::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : value_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void CCC::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CCC::~CCC() {
  // @@protoc_insertion_point(destructor:mytest.CCC)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CCC::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_value()) {
    clear_value();
  }
  _impl_.~Impl_();
}

void CCC::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:mytest.CCC)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (value_case()) {
    case kNumber: {
      // No need to clear
      break;
    }
    case kStr: {
      _impl_.value_.str_.Destroy();
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


const ::google::protobuf::MessageLite::ClassData*
CCC::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(CCC, _impl_._cached_size_),
              false,
          },
          &CCC::MergeImpl,
          &CCC::kDescriptorMethods,
          &descriptor_table_a_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 0, 22, 2> CCC::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CCC_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mytest::CCC>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 number = 1;
    {PROTOBUF_FIELD_OFFSET(CCC, _impl_.value_.number_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kInt32)},
    // string str = 2;
    {PROTOBUF_FIELD_OFFSET(CCC, _impl_.value_.str_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\12\0\3\0\0\0\0\0"
    "mytest.CCC"
    "str"
  }},
};

PROTOBUF_NOINLINE void CCC::Clear() {
// @@protoc_insertion_point(message_clear_start:mytest.CCC)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* CCC::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mytest.CCC)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (value_case()) {
    case kNumber: {
      target = ::google::protobuf::internal::WireFormatLite::
          WriteInt32ToArrayWithField<1>(
              stream, this->_internal_number(), target);
      break;
    }
    case kStr: {
      const std::string& _s = this->_internal_str();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mytest.CCC.str");
      target = stream->WriteStringMaybeAliased(2, _s, target);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mytest.CCC)
  return target;
}

::size_t CCC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mytest.CCC)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // int32 number = 1;
    case kNumber: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_number());
      break;
    }
    // string str = 2;
    case kStr: {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_str());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void CCC::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CCC*>(&to_msg);
  auto& from = static_cast<const CCC&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mytest.CCC)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_value();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kNumber: {
        _this->_impl_.value_.number_ = from._impl_.value_.number_;
        break;
      }
      case kStr: {
        if (oneof_needs_init) {
          _this->_impl_.value_.str_.InitDefault();
        }
        _this->_impl_.value_.str_.Set(from._internal_str(), arena);
        break;
      }
      case VALUE_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CCC::CopyFrom(const CCC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mytest.CCC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CCC::InternalSwap(CCC* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata CCC::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace mytest
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_a_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
