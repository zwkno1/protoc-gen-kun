// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: a.proto
// Protobuf C++ Version: 5.27.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_a_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_a_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_a_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_a_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_a_2eproto;
namespace mytest {
class AAA;
struct AAADefaultTypeInternal;
extern AAADefaultTypeInternal _AAA_default_instance_;
class AAA_Kvs2Entry_DoNotUse;
struct AAA_Kvs2Entry_DoNotUseDefaultTypeInternal;
extern AAA_Kvs2Entry_DoNotUseDefaultTypeInternal _AAA_Kvs2Entry_DoNotUse_default_instance_;
class AAA_KvsEntry_DoNotUse;
struct AAA_KvsEntry_DoNotUseDefaultTypeInternal;
extern AAA_KvsEntry_DoNotUseDefaultTypeInternal _AAA_KvsEntry_DoNotUse_default_instance_;
class BBB;
struct BBBDefaultTypeInternal;
extern BBBDefaultTypeInternal _BBB_default_instance_;
class CCC;
struct CCCDefaultTypeInternal;
extern CCCDefaultTypeInternal _CCC_default_instance_;
}  // namespace mytest
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace mytest {
enum Error : int {
  E1 = 0,
  E2 = 2,
  E3 = -1,
  Error_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Error_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Error_IsValid(int value);
extern const uint32_t Error_internal_data_[];
constexpr Error Error_MIN = static_cast<Error>(-1);
constexpr Error Error_MAX = static_cast<Error>(2);
constexpr int Error_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
Error_descriptor();
template <typename T>
const std::string& Error_Name(T value) {
  static_assert(std::is_same<T, Error>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Error_Name().");
  return Error_Name(static_cast<Error>(value));
}
template <>
inline const std::string& Error_Name(Error value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Error_descriptor,
                                                 -1, 2>(
      static_cast<int>(value));
}
inline bool Error_Parse(absl::string_view name, Error* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Error>(
      Error_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class CCC final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mytest.CCC) */ {
 public:
  inline CCC() : CCC(nullptr) {}
  ~CCC() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CCC(
      ::google::protobuf::internal::ConstantInitialized);

  inline CCC(const CCC& from) : CCC(nullptr, from) {}
  inline CCC(CCC&& from) noexcept
      : CCC(nullptr, std::move(from)) {}
  inline CCC& operator=(const CCC& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCC& operator=(CCC&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCC& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kNumber = 1,
    kStr = 2,
    VALUE_NOT_SET = 0,
  };
  static inline const CCC* internal_default_instance() {
    return reinterpret_cast<const CCC*>(
        &_CCC_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(CCC& a, CCC& b) { a.Swap(&b); }
  inline void Swap(CCC* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCC* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCC* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CCC>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CCC& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CCC& from) { CCC::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CCC* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "mytest.CCC"; }

 protected:
  explicit CCC(::google::protobuf::Arena* arena);
  CCC(::google::protobuf::Arena* arena, const CCC& from);
  CCC(::google::protobuf::Arena* arena, CCC&& from) noexcept
      : CCC(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNumberFieldNumber = 1,
    kStrFieldNumber = 2,
  };
  // int32 number = 1;
  bool has_number() const;
  void clear_number() ;
  ::int32_t number() const;
  void set_number(::int32_t value);

  private:
  ::int32_t _internal_number() const;
  void _internal_set_number(::int32_t value);

  public:
  // string str = 2;
  bool has_str() const;
  void clear_str() ;
  const std::string& str() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_str(Arg_&& arg, Args_... args);
  std::string* mutable_str();
  PROTOBUF_NODISCARD std::string* release_str();
  void set_allocated_str(std::string* value);

  private:
  const std::string& _internal_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str(
      const std::string& value);
  std::string* _internal_mutable_str();

  public:
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:mytest.CCC)
 private:
  class _Internal;
  void set_has_number();
  void set_has_str();
  inline bool has_value() const;
  inline void clear_has_value();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 0,
      22, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_CCC_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CCC& from_msg);
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::int32_t number_;
      ::google::protobuf::internal::ArenaStringPtr str_;
    } value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_a_2eproto;
};
// -------------------------------------------------------------------

class BBB final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mytest.BBB) */ {
 public:
  inline BBB() : BBB(nullptr) {}
  ~BBB() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BBB(
      ::google::protobuf::internal::ConstantInitialized);

  inline BBB(const BBB& from) : BBB(nullptr, from) {}
  inline BBB(BBB&& from) noexcept
      : BBB(nullptr, std::move(from)) {}
  inline BBB& operator=(const BBB& from) {
    CopyFrom(from);
    return *this;
  }
  inline BBB& operator=(BBB&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BBB& default_instance() {
    return *internal_default_instance();
  }
  static inline const BBB* internal_default_instance() {
    return reinterpret_cast<const BBB*>(
        &_BBB_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(BBB& a, BBB& b) { a.Swap(&b); }
  inline void Swap(BBB* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BBB* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BBB* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<BBB>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BBB& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BBB& from) { BBB::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BBB* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "mytest.BBB"; }

 protected:
  explicit BBB(::google::protobuf::Arena* arena);
  BBB(::google::protobuf::Arena* arena, const BBB& from);
  BBB(::google::protobuf::Arena* arena, BBB&& from) noexcept
      : BBB(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
    kIntsFieldNumber = 3,
  };
  // repeated string value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;

  public:
  void clear_value() ;
  const std::string& value(int index) const;
  std::string* mutable_value(int index);
  void set_value(int index, const std::string& value);
  void set_value(int index, std::string&& value);
  void set_value(int index, const char* value);
  void set_value(int index, const char* value, std::size_t size);
  void set_value(int index, absl::string_view value);
  std::string* add_value();
  void add_value(const std::string& value);
  void add_value(std::string&& value);
  void add_value(const char* value);
  void add_value(const char* value, std::size_t size);
  void add_value(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& value() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_value();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_value() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_value();

  public:
  // repeated int32 ints = 3;
  int ints_size() const;
  private:
  int _internal_ints_size() const;

  public:
  void clear_ints() ;
  ::int32_t ints(int index) const;
  void set_ints(int index, ::int32_t value);
  void add_ints(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& ints() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_ints();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_ints() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_ints();

  public:
  // @@protoc_insertion_point(class_scope:mytest.BBB)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 0,
      24, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_BBB_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BBB& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> value_;
    ::google::protobuf::RepeatedField<::int32_t> ints_;
    mutable ::google::protobuf::internal::CachedSize _ints_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_a_2eproto;
};
// -------------------------------------------------------------------

class AAA_KvsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          AAA_KvsEntry_DoNotUse, ::int32_t, ::int32_t,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      AAA_KvsEntry_DoNotUse, ::int32_t, ::int32_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>;
  AAA_KvsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AAA_KvsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AAA_KvsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AAA_KvsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AAA_KvsEntry_DoNotUse*>(
        &_AAA_KvsEntry_DoNotUse_default_instance_);
  }
const ::google::protobuf::Message::ClassData* GetClassData() const final;
  friend struct ::TableStruct_a_2eproto;
};
// -------------------------------------------------------------------

class AAA_Kvs2Entry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          AAA_Kvs2Entry_DoNotUse, ::int32_t, ::mytest::BBB,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      AAA_Kvs2Entry_DoNotUse, ::int32_t, ::mytest::BBB,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  AAA_Kvs2Entry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AAA_Kvs2Entry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AAA_Kvs2Entry_DoNotUse(::google::protobuf::Arena* arena);
  static const AAA_Kvs2Entry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AAA_Kvs2Entry_DoNotUse*>(
        &_AAA_Kvs2Entry_DoNotUse_default_instance_);
  }
const ::google::protobuf::Message::ClassData* GetClassData() const final;
  friend struct ::TableStruct_a_2eproto;
};
// -------------------------------------------------------------------

class AAA final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mytest.AAA) */ {
 public:
  inline AAA() : AAA(nullptr) {}
  ~AAA() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AAA(
      ::google::protobuf::internal::ConstantInitialized);

  inline AAA(const AAA& from) : AAA(nullptr, from) {}
  inline AAA(AAA&& from) noexcept
      : AAA(nullptr, std::move(from)) {}
  inline AAA& operator=(const AAA& from) {
    CopyFrom(from);
    return *this;
  }
  inline AAA& operator=(AAA&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AAA& default_instance() {
    return *internal_default_instance();
  }
  static inline const AAA* internal_default_instance() {
    return reinterpret_cast<const AAA*>(
        &_AAA_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(AAA& a, AAA& b) { a.Swap(&b); }
  inline void Swap(AAA* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AAA* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AAA* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AAA>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AAA& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AAA& from) { AAA::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AAA* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "mytest.AAA"; }

 protected:
  explicit AAA(::google::protobuf::Arena* arena);
  AAA(::google::protobuf::Arena* arena, const AAA& from);
  AAA(::google::protobuf::Arena* arena, AAA&& from) noexcept
      : AAA(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNamesFieldNumber = 2,
    kKvsFieldNumber = 3,
    kKvs2FieldNumber = 4,
    kIntsFieldNumber = 331,
    kUint64SFieldNumber = 9899,
    kFloatsFieldNumber = 12311,
    kErrorsFieldNumber = 12312,
    kDoublesFieldNumber = 22311,
    kBbbsFieldNumber = 123123,
    kUint32SFieldNumber = 12312312,
    kInt64SFieldNumber = 12312364,
    kDateFieldNumber = 6,
    kXxFieldNumber = 23,
    kBbbFieldNumber = 16,
    kEFieldNumber = 5,
    kValueFieldNumber = 11,
    kDFieldNumber = 99,
    kAaaFieldNumber = 33,
  };
  // repeated string names = 2;
  int names_size() const;
  private:
  int _internal_names_size() const;

  public:
  void clear_names() ;
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, std::size_t size);
  void set_names(int index, absl::string_view value);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, std::size_t size);
  void add_names(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_names();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_names();

  public:
  // map<int32, int32> kvs = 3;
  int kvs_size() const;
  private:
  int _internal_kvs_size() const;

  public:
  void clear_kvs() ;
  const ::google::protobuf::Map<::int32_t, ::int32_t>& kvs() const;
  ::google::protobuf::Map<::int32_t, ::int32_t>* mutable_kvs();

  private:
  const ::google::protobuf::Map<::int32_t, ::int32_t>& _internal_kvs() const;
  ::google::protobuf::Map<::int32_t, ::int32_t>* _internal_mutable_kvs();

  public:
  // map<int32, .mytest.BBB> kvs2 = 4;
  int kvs2_size() const;
  private:
  int _internal_kvs2_size() const;

  public:
  void clear_kvs2() ;
  const ::google::protobuf::Map<::int32_t, ::mytest::BBB>& kvs2() const;
  ::google::protobuf::Map<::int32_t, ::mytest::BBB>* mutable_kvs2();

  private:
  const ::google::protobuf::Map<::int32_t, ::mytest::BBB>& _internal_kvs2() const;
  ::google::protobuf::Map<::int32_t, ::mytest::BBB>* _internal_mutable_kvs2();

  public:
  // repeated int32 ints = 331;
  int ints_size() const;
  private:
  int _internal_ints_size() const;

  public:
  void clear_ints() ;
  ::int32_t ints(int index) const;
  void set_ints(int index, ::int32_t value);
  void add_ints(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& ints() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_ints();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_ints() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_ints();

  public:
  // repeated uint64 uint64s = 9899;
  int uint64s_size() const;
  private:
  int _internal_uint64s_size() const;

  public:
  void clear_uint64s() ;
  ::uint64_t uint64s(int index) const;
  void set_uint64s(int index, ::uint64_t value);
  void add_uint64s(::uint64_t value);
  const ::google::protobuf::RepeatedField<::uint64_t>& uint64s() const;
  ::google::protobuf::RepeatedField<::uint64_t>* mutable_uint64s();

  private:
  const ::google::protobuf::RepeatedField<::uint64_t>& _internal_uint64s() const;
  ::google::protobuf::RepeatedField<::uint64_t>* _internal_mutable_uint64s();

  public:
  // repeated float floats = 12311;
  int floats_size() const;
  private:
  int _internal_floats_size() const;

  public:
  void clear_floats() ;
  float floats(int index) const;
  void set_floats(int index, float value);
  void add_floats(float value);
  const ::google::protobuf::RepeatedField<float>& floats() const;
  ::google::protobuf::RepeatedField<float>* mutable_floats();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_floats() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_floats();

  public:
  // repeated .mytest.Error errors = 12312;
  int errors_size() const;
  private:
  int _internal_errors_size() const;

  public:
  void clear_errors() ;
  public:
  ::mytest::Error errors(int index) const;
  void set_errors(int index, ::mytest::Error value);
  void add_errors(::mytest::Error value);
  const ::google::protobuf::RepeatedField<int>& errors() const;
  ::google::protobuf::RepeatedField<int>* mutable_errors();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_errors() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_errors();

  public:
  // repeated double doubles = 22311;
  int doubles_size() const;
  private:
  int _internal_doubles_size() const;

  public:
  void clear_doubles() ;
  double doubles(int index) const;
  void set_doubles(int index, double value);
  void add_doubles(double value);
  const ::google::protobuf::RepeatedField<double>& doubles() const;
  ::google::protobuf::RepeatedField<double>* mutable_doubles();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_doubles() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_doubles();

  public:
  // repeated .mytest.BBB bbbs = 123123;
  int bbbs_size() const;
  private:
  int _internal_bbbs_size() const;

  public:
  void clear_bbbs() ;
  ::mytest::BBB* mutable_bbbs(int index);
  ::google::protobuf::RepeatedPtrField<::mytest::BBB>* mutable_bbbs();

  private:
  const ::google::protobuf::RepeatedPtrField<::mytest::BBB>& _internal_bbbs() const;
  ::google::protobuf::RepeatedPtrField<::mytest::BBB>* _internal_mutable_bbbs();
  public:
  const ::mytest::BBB& bbbs(int index) const;
  ::mytest::BBB* add_bbbs();
  const ::google::protobuf::RepeatedPtrField<::mytest::BBB>& bbbs() const;
  // repeated uint32 uint32s = 12312312;
  int uint32s_size() const;
  private:
  int _internal_uint32s_size() const;

  public:
  void clear_uint32s() ;
  ::uint32_t uint32s(int index) const;
  void set_uint32s(int index, ::uint32_t value);
  void add_uint32s(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& uint32s() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_uint32s();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_uint32s() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_uint32s();

  public:
  // repeated int64 int64s = 12312364;
  int int64s_size() const;
  private:
  int _internal_int64s_size() const;

  public:
  void clear_int64s() ;
  ::int64_t int64s(int index) const;
  void set_int64s(int index, ::int64_t value);
  void add_int64s(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& int64s() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_int64s();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_int64s() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_int64s();

  public:
  // bytes date = 6;
  void clear_date() ;
  const std::string& date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_date(Arg_&& arg, Args_... args);
  std::string* mutable_date();
  PROTOBUF_NODISCARD std::string* release_date();
  void set_allocated_date(std::string* value);

  private:
  const std::string& _internal_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date(
      const std::string& value);
  std::string* _internal_mutable_date();

  public:
  // string xx = 23;
  void clear_xx() ;
  const std::string& xx() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_xx(Arg_&& arg, Args_... args);
  std::string* mutable_xx();
  PROTOBUF_NODISCARD std::string* release_xx();
  void set_allocated_xx(std::string* value);

  private:
  const std::string& _internal_xx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xx(
      const std::string& value);
  std::string* _internal_mutable_xx();

  public:
  // .mytest.BBB bbb = 16;
  bool has_bbb() const;
  void clear_bbb() ;
  const ::mytest::BBB& bbb() const;
  PROTOBUF_NODISCARD ::mytest::BBB* release_bbb();
  ::mytest::BBB* mutable_bbb();
  void set_allocated_bbb(::mytest::BBB* value);
  void unsafe_arena_set_allocated_bbb(::mytest::BBB* value);
  ::mytest::BBB* unsafe_arena_release_bbb();

  private:
  const ::mytest::BBB& _internal_bbb() const;
  ::mytest::BBB* _internal_mutable_bbb();

  public:
  // .mytest.Error e = 5;
  void clear_e() ;
  ::mytest::Error e() const;
  void set_e(::mytest::Error value);

  private:
  ::mytest::Error _internal_e() const;
  void _internal_set_e(::mytest::Error value);

  public:
  // int32 value = 11;
  void clear_value() ;
  ::int32_t value() const;
  void set_value(::int32_t value);

  private:
  ::int32_t _internal_value() const;
  void _internal_set_value(::int32_t value);

  public:
  // double d = 99;
  void clear_d() ;
  double d() const;
  void set_d(double value);

  private:
  double _internal_d() const;
  void _internal_set_d(double value);

  public:
  // float aaa = 33;
  void clear_aaa() ;
  float aaa() const;
  void set_aaa(float value);

  private:
  float _internal_aaa() const;
  void _internal_set_aaa(float value);

  public:
  // @@protoc_insertion_point(class_scope:mytest.AAA)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 18, 5,
      42, 51>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_AAA_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AAA& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> names_;
    ::google::protobuf::internal::MapField<AAA_KvsEntry_DoNotUse, ::int32_t, ::int32_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
        kvs_;
    ::google::protobuf::internal::MapField<AAA_Kvs2Entry_DoNotUse, ::int32_t, ::mytest::BBB,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        kvs2_;
    ::google::protobuf::RepeatedField<::int32_t> ints_;
    mutable ::google::protobuf::internal::CachedSize _ints_cached_byte_size_;
    ::google::protobuf::RepeatedField<::uint64_t> uint64s_;
    mutable ::google::protobuf::internal::CachedSize _uint64s_cached_byte_size_;
    ::google::protobuf::RepeatedField<float> floats_;
    ::google::protobuf::RepeatedField<int> errors_;
    mutable ::google::protobuf::internal::CachedSize _errors_cached_byte_size_;
    ::google::protobuf::RepeatedField<double> doubles_;
    ::google::protobuf::RepeatedPtrField< ::mytest::BBB > bbbs_;
    ::google::protobuf::RepeatedField<::uint32_t> uint32s_;
    mutable ::google::protobuf::internal::CachedSize _uint32s_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int64_t> int64s_;
    mutable ::google::protobuf::internal::CachedSize _int64s_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr date_;
    ::google::protobuf::internal::ArenaStringPtr xx_;
    ::mytest::BBB* bbb_;
    int e_;
    ::int32_t value_;
    double d_;
    float aaa_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_a_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BBB

// repeated string value = 1;
inline int BBB::_internal_value_size() const {
  return _internal_value().size();
}
inline int BBB::value_size() const {
  return _internal_value_size();
}
inline void BBB::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Clear();
}
inline std::string* BBB::add_value()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_value()->Add();
  // @@protoc_insertion_point(field_add_mutable:mytest.BBB.value)
  return _s;
}
inline const std::string& BBB::value(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mytest.BBB.value)
  return _internal_value().Get(index);
}
inline std::string* BBB::mutable_value(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:mytest.BBB.value)
  return _internal_mutable_value()->Mutable(index);
}
inline void BBB::set_value(int index, const std::string& value) {
  _internal_mutable_value()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mytest.BBB.value)
}
inline void BBB::set_value(int index, std::string&& value) {
  _internal_mutable_value()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mytest.BBB.value)
}
inline void BBB::set_value(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_value()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mytest.BBB.value)
}
inline void BBB::set_value(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_value()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mytest.BBB.value)
}
inline void BBB::set_value(int index, absl::string_view value) {
  _internal_mutable_value()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:mytest.BBB.value)
}
inline void BBB::add_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_value()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:mytest.BBB.value)
}
inline void BBB::add_value(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_value()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:mytest.BBB.value)
}
inline void BBB::add_value(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_value()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mytest.BBB.value)
}
inline void BBB::add_value(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_value()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mytest.BBB.value)
}
inline void BBB::add_value(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_value()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:mytest.BBB.value)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
BBB::value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mytest.BBB.value)
  return _internal_value();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
BBB::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mytest.BBB.value)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_value();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
BBB::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
BBB::_internal_mutable_value() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.value_;
}

// repeated int32 ints = 3;
inline int BBB::_internal_ints_size() const {
  return _internal_ints().size();
}
inline int BBB::ints_size() const {
  return _internal_ints_size();
}
inline void BBB::clear_ints() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ints_.Clear();
}
inline ::int32_t BBB::ints(int index) const {
  // @@protoc_insertion_point(field_get:mytest.BBB.ints)
  return _internal_ints().Get(index);
}
inline void BBB::set_ints(int index, ::int32_t value) {
  _internal_mutable_ints()->Set(index, value);
  // @@protoc_insertion_point(field_set:mytest.BBB.ints)
}
inline void BBB::add_ints(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_ints()->Add(value);
  // @@protoc_insertion_point(field_add:mytest.BBB.ints)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& BBB::ints() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mytest.BBB.ints)
  return _internal_ints();
}
inline ::google::protobuf::RepeatedField<::int32_t>* BBB::mutable_ints()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mytest.BBB.ints)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_ints();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
BBB::_internal_ints() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ints_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* BBB::_internal_mutable_ints() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.ints_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AAA

// int32 value = 11;
inline void AAA::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
}
inline ::int32_t AAA::value() const {
  // @@protoc_insertion_point(field_get:mytest.AAA.value)
  return _internal_value();
}
inline void AAA::set_value(::int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:mytest.AAA.value)
}
inline ::int32_t AAA::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void AAA::_internal_set_value(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// repeated string names = 2;
inline int AAA::_internal_names_size() const {
  return _internal_names().size();
}
inline int AAA::names_size() const {
  return _internal_names_size();
}
inline void AAA::clear_names() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.names_.Clear();
}
inline std::string* AAA::add_names()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_names()->Add();
  // @@protoc_insertion_point(field_add_mutable:mytest.AAA.names)
  return _s;
}
inline const std::string& AAA::names(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mytest.AAA.names)
  return _internal_names().Get(index);
}
inline std::string* AAA::mutable_names(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:mytest.AAA.names)
  return _internal_mutable_names()->Mutable(index);
}
inline void AAA::set_names(int index, const std::string& value) {
  _internal_mutable_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:mytest.AAA.names)
}
inline void AAA::set_names(int index, std::string&& value) {
  _internal_mutable_names()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:mytest.AAA.names)
}
inline void AAA::set_names(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mytest.AAA.names)
}
inline void AAA::set_names(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_names()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mytest.AAA.names)
}
inline void AAA::set_names(int index, absl::string_view value) {
  _internal_mutable_names()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:mytest.AAA.names)
}
inline void AAA::add_names(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:mytest.AAA.names)
}
inline void AAA::add_names(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_names()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:mytest.AAA.names)
}
inline void AAA::add_names(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mytest.AAA.names)
}
inline void AAA::add_names(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_names()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mytest.AAA.names)
}
inline void AAA::add_names(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_names()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:mytest.AAA.names)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AAA::names() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mytest.AAA.names)
  return _internal_names();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AAA::mutable_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mytest.AAA.names)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_names();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AAA::_internal_names() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.names_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AAA::_internal_mutable_names() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.names_;
}

// string xx = 23;
inline void AAA::clear_xx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.xx_.ClearToEmpty();
}
inline const std::string& AAA::xx() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mytest.AAA.xx)
  return _internal_xx();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AAA::set_xx(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.xx_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mytest.AAA.xx)
}
inline std::string* AAA::mutable_xx() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_xx();
  // @@protoc_insertion_point(field_mutable:mytest.AAA.xx)
  return _s;
}
inline const std::string& AAA::_internal_xx() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.xx_.Get();
}
inline void AAA::_internal_set_xx(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.xx_.Set(value, GetArena());
}
inline std::string* AAA::_internal_mutable_xx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.xx_.Mutable( GetArena());
}
inline std::string* AAA::release_xx() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mytest.AAA.xx)
  return _impl_.xx_.Release();
}
inline void AAA::set_allocated_xx(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.xx_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.xx_.IsDefault()) {
          _impl_.xx_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mytest.AAA.xx)
}

// map<int32, int32> kvs = 3;
inline int AAA::_internal_kvs_size() const {
  return _internal_kvs().size();
}
inline int AAA::kvs_size() const {
  return _internal_kvs_size();
}
inline void AAA::clear_kvs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kvs_.Clear();
}
inline const ::google::protobuf::Map<::int32_t, ::int32_t>& AAA::_internal_kvs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.kvs_.GetMap();
}
inline const ::google::protobuf::Map<::int32_t, ::int32_t>& AAA::kvs() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:mytest.AAA.kvs)
  return _internal_kvs();
}
inline ::google::protobuf::Map<::int32_t, ::int32_t>* AAA::_internal_mutable_kvs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.kvs_.MutableMap();
}
inline ::google::protobuf::Map<::int32_t, ::int32_t>* AAA::mutable_kvs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:mytest.AAA.kvs)
  return _internal_mutable_kvs();
}

// map<int32, .mytest.BBB> kvs2 = 4;
inline int AAA::_internal_kvs2_size() const {
  return _internal_kvs2().size();
}
inline int AAA::kvs2_size() const {
  return _internal_kvs2_size();
}
inline void AAA::clear_kvs2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.kvs2_.Clear();
}
inline const ::google::protobuf::Map<::int32_t, ::mytest::BBB>& AAA::_internal_kvs2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.kvs2_.GetMap();
}
inline const ::google::protobuf::Map<::int32_t, ::mytest::BBB>& AAA::kvs2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:mytest.AAA.kvs2)
  return _internal_kvs2();
}
inline ::google::protobuf::Map<::int32_t, ::mytest::BBB>* AAA::_internal_mutable_kvs2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.kvs2_.MutableMap();
}
inline ::google::protobuf::Map<::int32_t, ::mytest::BBB>* AAA::mutable_kvs2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:mytest.AAA.kvs2)
  return _internal_mutable_kvs2();
}

// .mytest.Error e = 5;
inline void AAA::clear_e() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.e_ = 0;
}
inline ::mytest::Error AAA::e() const {
  // @@protoc_insertion_point(field_get:mytest.AAA.e)
  return _internal_e();
}
inline void AAA::set_e(::mytest::Error value) {
  _internal_set_e(value);
  // @@protoc_insertion_point(field_set:mytest.AAA.e)
}
inline ::mytest::Error AAA::_internal_e() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::mytest::Error>(_impl_.e_);
}
inline void AAA::_internal_set_e(::mytest::Error value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.e_ = value;
}

// bytes date = 6;
inline void AAA::clear_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_.ClearToEmpty();
}
inline const std::string& AAA::date() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mytest.AAA.date)
  return _internal_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AAA::set_date(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mytest.AAA.date)
}
inline std::string* AAA::mutable_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_date();
  // @@protoc_insertion_point(field_mutable:mytest.AAA.date)
  return _s;
}
inline const std::string& AAA::_internal_date() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.date_.Get();
}
inline void AAA::_internal_set_date(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_.Set(value, GetArena());
}
inline std::string* AAA::_internal_mutable_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.date_.Mutable( GetArena());
}
inline std::string* AAA::release_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mytest.AAA.date)
  return _impl_.date_.Release();
}
inline void AAA::set_allocated_date(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.date_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.date_.IsDefault()) {
          _impl_.date_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mytest.AAA.date)
}

// .mytest.BBB bbb = 16;
inline bool AAA::has_bbb() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bbb_ != nullptr);
  return value;
}
inline void AAA::clear_bbb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.bbb_ != nullptr) _impl_.bbb_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mytest::BBB& AAA::_internal_bbb() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mytest::BBB* p = _impl_.bbb_;
  return p != nullptr ? *p : reinterpret_cast<const ::mytest::BBB&>(::mytest::_BBB_default_instance_);
}
inline const ::mytest::BBB& AAA::bbb() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mytest.AAA.bbb)
  return _internal_bbb();
}
inline void AAA::unsafe_arena_set_allocated_bbb(::mytest::BBB* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bbb_);
  }
  _impl_.bbb_ = reinterpret_cast<::mytest::BBB*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mytest.AAA.bbb)
}
inline ::mytest::BBB* AAA::release_bbb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mytest::BBB* released = _impl_.bbb_;
  _impl_.bbb_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mytest::BBB* AAA::unsafe_arena_release_bbb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mytest.AAA.bbb)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mytest::BBB* temp = _impl_.bbb_;
  _impl_.bbb_ = nullptr;
  return temp;
}
inline ::mytest::BBB* AAA::_internal_mutable_bbb() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.bbb_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mytest::BBB>(GetArena());
    _impl_.bbb_ = reinterpret_cast<::mytest::BBB*>(p);
  }
  return _impl_.bbb_;
}
inline ::mytest::BBB* AAA::mutable_bbb() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mytest::BBB* _msg = _internal_mutable_bbb();
  // @@protoc_insertion_point(field_mutable:mytest.AAA.bbb)
  return _msg;
}
inline void AAA::set_allocated_bbb(::mytest::BBB* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.bbb_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.bbb_ = reinterpret_cast<::mytest::BBB*>(value);
  // @@protoc_insertion_point(field_set_allocated:mytest.AAA.bbb)
}

// float aaa = 33;
inline void AAA::clear_aaa() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.aaa_ = 0;
}
inline float AAA::aaa() const {
  // @@protoc_insertion_point(field_get:mytest.AAA.aaa)
  return _internal_aaa();
}
inline void AAA::set_aaa(float value) {
  _internal_set_aaa(value);
  // @@protoc_insertion_point(field_set:mytest.AAA.aaa)
}
inline float AAA::_internal_aaa() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.aaa_;
}
inline void AAA::_internal_set_aaa(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.aaa_ = value;
}

// double d = 99;
inline void AAA::clear_d() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.d_ = 0;
}
inline double AAA::d() const {
  // @@protoc_insertion_point(field_get:mytest.AAA.d)
  return _internal_d();
}
inline void AAA::set_d(double value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:mytest.AAA.d)
}
inline double AAA::_internal_d() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.d_;
}
inline void AAA::_internal_set_d(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.d_ = value;
}

// repeated .mytest.BBB bbbs = 123123;
inline int AAA::_internal_bbbs_size() const {
  return _internal_bbbs().size();
}
inline int AAA::bbbs_size() const {
  return _internal_bbbs_size();
}
inline void AAA::clear_bbbs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bbbs_.Clear();
}
inline ::mytest::BBB* AAA::mutable_bbbs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:mytest.AAA.bbbs)
  return _internal_mutable_bbbs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::mytest::BBB>* AAA::mutable_bbbs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mytest.AAA.bbbs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_bbbs();
}
inline const ::mytest::BBB& AAA::bbbs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mytest.AAA.bbbs)
  return _internal_bbbs().Get(index);
}
inline ::mytest::BBB* AAA::add_bbbs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::mytest::BBB* _add = _internal_mutable_bbbs()->Add();
  // @@protoc_insertion_point(field_add:mytest.AAA.bbbs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::mytest::BBB>& AAA::bbbs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mytest.AAA.bbbs)
  return _internal_bbbs();
}
inline const ::google::protobuf::RepeatedPtrField<::mytest::BBB>&
AAA::_internal_bbbs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bbbs_;
}
inline ::google::protobuf::RepeatedPtrField<::mytest::BBB>*
AAA::_internal_mutable_bbbs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.bbbs_;
}

// repeated int32 ints = 331;
inline int AAA::_internal_ints_size() const {
  return _internal_ints().size();
}
inline int AAA::ints_size() const {
  return _internal_ints_size();
}
inline void AAA::clear_ints() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ints_.Clear();
}
inline ::int32_t AAA::ints(int index) const {
  // @@protoc_insertion_point(field_get:mytest.AAA.ints)
  return _internal_ints().Get(index);
}
inline void AAA::set_ints(int index, ::int32_t value) {
  _internal_mutable_ints()->Set(index, value);
  // @@protoc_insertion_point(field_set:mytest.AAA.ints)
}
inline void AAA::add_ints(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_ints()->Add(value);
  // @@protoc_insertion_point(field_add:mytest.AAA.ints)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& AAA::ints() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mytest.AAA.ints)
  return _internal_ints();
}
inline ::google::protobuf::RepeatedField<::int32_t>* AAA::mutable_ints()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mytest.AAA.ints)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_ints();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
AAA::_internal_ints() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ints_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* AAA::_internal_mutable_ints() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.ints_;
}

// repeated uint32 uint32s = 12312312;
inline int AAA::_internal_uint32s_size() const {
  return _internal_uint32s().size();
}
inline int AAA::uint32s_size() const {
  return _internal_uint32s_size();
}
inline void AAA::clear_uint32s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uint32s_.Clear();
}
inline ::uint32_t AAA::uint32s(int index) const {
  // @@protoc_insertion_point(field_get:mytest.AAA.uint32s)
  return _internal_uint32s().Get(index);
}
inline void AAA::set_uint32s(int index, ::uint32_t value) {
  _internal_mutable_uint32s()->Set(index, value);
  // @@protoc_insertion_point(field_set:mytest.AAA.uint32s)
}
inline void AAA::add_uint32s(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_uint32s()->Add(value);
  // @@protoc_insertion_point(field_add:mytest.AAA.uint32s)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& AAA::uint32s() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mytest.AAA.uint32s)
  return _internal_uint32s();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* AAA::mutable_uint32s()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mytest.AAA.uint32s)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_uint32s();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>&
AAA::_internal_uint32s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uint32s_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* AAA::_internal_mutable_uint32s() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.uint32s_;
}

// repeated float floats = 12311;
inline int AAA::_internal_floats_size() const {
  return _internal_floats().size();
}
inline int AAA::floats_size() const {
  return _internal_floats_size();
}
inline void AAA::clear_floats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.floats_.Clear();
}
inline float AAA::floats(int index) const {
  // @@protoc_insertion_point(field_get:mytest.AAA.floats)
  return _internal_floats().Get(index);
}
inline void AAA::set_floats(int index, float value) {
  _internal_mutable_floats()->Set(index, value);
  // @@protoc_insertion_point(field_set:mytest.AAA.floats)
}
inline void AAA::add_floats(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_floats()->Add(value);
  // @@protoc_insertion_point(field_add:mytest.AAA.floats)
}
inline const ::google::protobuf::RepeatedField<float>& AAA::floats() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mytest.AAA.floats)
  return _internal_floats();
}
inline ::google::protobuf::RepeatedField<float>* AAA::mutable_floats()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mytest.AAA.floats)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_floats();
}
inline const ::google::protobuf::RepeatedField<float>&
AAA::_internal_floats() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.floats_;
}
inline ::google::protobuf::RepeatedField<float>* AAA::_internal_mutable_floats() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.floats_;
}

// repeated double doubles = 22311;
inline int AAA::_internal_doubles_size() const {
  return _internal_doubles().size();
}
inline int AAA::doubles_size() const {
  return _internal_doubles_size();
}
inline void AAA::clear_doubles() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.doubles_.Clear();
}
inline double AAA::doubles(int index) const {
  // @@protoc_insertion_point(field_get:mytest.AAA.doubles)
  return _internal_doubles().Get(index);
}
inline void AAA::set_doubles(int index, double value) {
  _internal_mutable_doubles()->Set(index, value);
  // @@protoc_insertion_point(field_set:mytest.AAA.doubles)
}
inline void AAA::add_doubles(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_doubles()->Add(value);
  // @@protoc_insertion_point(field_add:mytest.AAA.doubles)
}
inline const ::google::protobuf::RepeatedField<double>& AAA::doubles() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mytest.AAA.doubles)
  return _internal_doubles();
}
inline ::google::protobuf::RepeatedField<double>* AAA::mutable_doubles()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mytest.AAA.doubles)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_doubles();
}
inline const ::google::protobuf::RepeatedField<double>&
AAA::_internal_doubles() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.doubles_;
}
inline ::google::protobuf::RepeatedField<double>* AAA::_internal_mutable_doubles() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.doubles_;
}

// repeated int64 int64s = 12312364;
inline int AAA::_internal_int64s_size() const {
  return _internal_int64s().size();
}
inline int AAA::int64s_size() const {
  return _internal_int64s_size();
}
inline void AAA::clear_int64s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.int64s_.Clear();
}
inline ::int64_t AAA::int64s(int index) const {
  // @@protoc_insertion_point(field_get:mytest.AAA.int64s)
  return _internal_int64s().Get(index);
}
inline void AAA::set_int64s(int index, ::int64_t value) {
  _internal_mutable_int64s()->Set(index, value);
  // @@protoc_insertion_point(field_set:mytest.AAA.int64s)
}
inline void AAA::add_int64s(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_int64s()->Add(value);
  // @@protoc_insertion_point(field_add:mytest.AAA.int64s)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& AAA::int64s() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mytest.AAA.int64s)
  return _internal_int64s();
}
inline ::google::protobuf::RepeatedField<::int64_t>* AAA::mutable_int64s()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mytest.AAA.int64s)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_int64s();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
AAA::_internal_int64s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.int64s_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* AAA::_internal_mutable_int64s() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.int64s_;
}

// repeated uint64 uint64s = 9899;
inline int AAA::_internal_uint64s_size() const {
  return _internal_uint64s().size();
}
inline int AAA::uint64s_size() const {
  return _internal_uint64s_size();
}
inline void AAA::clear_uint64s() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uint64s_.Clear();
}
inline ::uint64_t AAA::uint64s(int index) const {
  // @@protoc_insertion_point(field_get:mytest.AAA.uint64s)
  return _internal_uint64s().Get(index);
}
inline void AAA::set_uint64s(int index, ::uint64_t value) {
  _internal_mutable_uint64s()->Set(index, value);
  // @@protoc_insertion_point(field_set:mytest.AAA.uint64s)
}
inline void AAA::add_uint64s(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_uint64s()->Add(value);
  // @@protoc_insertion_point(field_add:mytest.AAA.uint64s)
}
inline const ::google::protobuf::RepeatedField<::uint64_t>& AAA::uint64s() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mytest.AAA.uint64s)
  return _internal_uint64s();
}
inline ::google::protobuf::RepeatedField<::uint64_t>* AAA::mutable_uint64s()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mytest.AAA.uint64s)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_uint64s();
}
inline const ::google::protobuf::RepeatedField<::uint64_t>&
AAA::_internal_uint64s() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uint64s_;
}
inline ::google::protobuf::RepeatedField<::uint64_t>* AAA::_internal_mutable_uint64s() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.uint64s_;
}

// repeated .mytest.Error errors = 12312;
inline int AAA::_internal_errors_size() const {
  return _internal_errors().size();
}
inline int AAA::errors_size() const {
  return _internal_errors_size();
}
inline void AAA::clear_errors() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.errors_.Clear();
}
inline ::mytest::Error AAA::errors(int index) const {
  // @@protoc_insertion_point(field_get:mytest.AAA.errors)
  return static_cast<::mytest::Error>(_internal_errors().Get(index));
}
inline void AAA::set_errors(int index, ::mytest::Error value) {
  _internal_mutable_errors()->Set(index, value);
  // @@protoc_insertion_point(field_set:mytest.AAA.errors)
}
inline void AAA::add_errors(::mytest::Error value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_errors()->Add(value);
  // @@protoc_insertion_point(field_add:mytest.AAA.errors)
}
inline const ::google::protobuf::RepeatedField<int>& AAA::errors() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mytest.AAA.errors)
  return _internal_errors();
}
inline ::google::protobuf::RepeatedField<int>* AAA::mutable_errors()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mytest.AAA.errors)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_errors();
}
inline const ::google::protobuf::RepeatedField<int>& AAA::_internal_errors()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.errors_;
}
inline ::google::protobuf::RepeatedField<int>* AAA::_internal_mutable_errors() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.errors_;
}

// -------------------------------------------------------------------

// CCC

// int32 number = 1;
inline bool CCC::has_number() const {
  return value_case() == kNumber;
}
inline void CCC::set_has_number() {
  _impl_._oneof_case_[0] = kNumber;
}
inline void CCC::clear_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kNumber) {
    _impl_.value_.number_ = 0;
    clear_has_value();
  }
}
inline ::int32_t CCC::number() const {
  // @@protoc_insertion_point(field_get:mytest.CCC.number)
  return _internal_number();
}
inline void CCC::set_number(::int32_t value) {
  if (value_case() != kNumber) {
    clear_value();
    set_has_number();
  }
  _impl_.value_.number_ = value;
  // @@protoc_insertion_point(field_set:mytest.CCC.number)
}
inline ::int32_t CCC::_internal_number() const {
  if (value_case() == kNumber) {
    return _impl_.value_.number_;
  }
  return 0;
}

// string str = 2;
inline bool CCC::has_str() const {
  return value_case() == kStr;
}
inline void CCC::set_has_str() {
  _impl_._oneof_case_[0] = kStr;
}
inline void CCC::clear_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kStr) {
    _impl_.value_.str_.Destroy();
    clear_has_value();
  }
}
inline const std::string& CCC::str() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mytest.CCC.str)
  return _internal_str();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CCC::set_str(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStr) {
    clear_value();

    set_has_str();
    _impl_.value_.str_.InitDefault();
  }
  _impl_.value_.str_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mytest.CCC.str)
}
inline std::string* CCC::mutable_str() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_str();
  // @@protoc_insertion_point(field_mutable:mytest.CCC.str)
  return _s;
}
inline const std::string& CCC::_internal_str() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (value_case() != kStr) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.str_.Get();
}
inline void CCC::_internal_set_str(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStr) {
    clear_value();

    set_has_str();
    _impl_.value_.str_.InitDefault();
  }
  _impl_.value_.str_.Set(value, GetArena());
}
inline std::string* CCC::_internal_mutable_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStr) {
    clear_value();

    set_has_str();
    _impl_.value_.str_.InitDefault();
  }
  return _impl_.value_.str_.Mutable( GetArena());
}
inline std::string* CCC::release_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mytest.CCC.str)
  if (value_case() != kStr) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.str_.Release();
}
inline void CCC::set_allocated_str(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_str();
    _impl_.value_.str_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:mytest.CCC.str)
}

inline bool CCC::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void CCC::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline CCC::ValueCase CCC::value_case() const {
  return CCC::ValueCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace mytest


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::mytest::Error> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mytest::Error>() {
  return ::mytest::Error_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_a_2eproto_2epb_2eh
